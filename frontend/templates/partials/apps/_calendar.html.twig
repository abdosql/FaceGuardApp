<div class="col-xl-12">
    <div class="card card-h-100">
        <div class="card-body">
            <div id="calendar" data-schedule="{{ schedules | json_encode }}"></div>
        </div>
    </div>
</div><!-- end col -->
<div style='clear:both'></div>

<!-- calendar min js -->
<script src="{{ absolute_url(asset("assets/libs/fullcalendar/index.global.min.js")) }}"></script>

<!-- Calendar init -->
<script src="{{ absolute_url(asset("assets/js/pages/calendar.init.js")) }}"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const calendarEl = document.getElementById('calendar')
        var schedules = JSON.parse(calendarEl.getAttribute("data-schedule"));

        function getMondayOfCurrentWeek() {
            const today = new Date();
            const dayOfWeek = today.getDay(); // Get the current day of the week (0 = Sunday, 1 = Monday, ..., 6 = Saturday)

            // Calculate the difference in days from the current day to the last Monday
            const diffToMonday = (dayOfWeek + 6) % 7;

            // Get the date of the previous Monday
            const mondayDate = new Date(today);
            mondayDate.setDate(today.getDate() - diffToMonday);

            // Set the hours, minutes, seconds, and milliseconds to zero for a clean date object
            mondayDate.setHours(0, 0, 0, 0);

            return mondayDate;
        }

        var startDate = getMondayOfCurrentWeek();
        var classNames = ['bg-primary', 'bg-success', 'bg-danger', 'bg-warning', 'bg-info', 'bg-dark'];

        function getRandomClassName() {
            return classNames[Math.floor(Math.random() * classNames.length)];
        }
        function formatDatePart(value) {
            return ('0' + value).slice(-2);
        }

        var eventData = schedules.map(function(schedule) {
            // Extracting the day number and time
            var dayAndTimeParts = schedule.start.split("T");
            var dayNumber = parseInt(dayAndTimeParts[0]);
            var startTime = dayAndTimeParts[1];
            var endTime = schedule.end.split("T")[1];

            // Calculate the specific date within the range for the given day number
            var eventDate = new Date(startDate);
            eventDate.setDate(startDate.getDate() + dayNumber - 1); // Adjust to the correct day in the range

            // Constructing the full datetime strings
            var formattedMonth = formatDatePart(eventDate.getMonth() + 1); // Month is zero-based
            var formattedDate = formatDatePart(eventDate.getDate());
            var startDateTime = eventDate.getFullYear() + "-" + formattedMonth + "-" + formattedDate + "T" + startTime;
            var endDateTime = eventDate.getFullYear() + "-" + formattedMonth + "-" + formattedDate + "T" + endTime;

            return {
                title: schedule.title,
                start: startDateTime,
                end: endDateTime,
                description: schedule.description,
                className: getRandomClassName()
                // Add other properties as needed
            };
            console.log(eventDate);
        });
        const calendar = new FullCalendar.Calendar(calendarEl, {
            timeZone: 'local',
            editable: true,
            droppable: true,
            selectable: true,
            navLinks: false,
            initialView: 'timeGridWeek', // Display time slots vertically
            themeSystem: 'bootstrap',
            headerToolbar: false,
            eventOverlap: false,
            allDaySlot: false,
            slotDuration: '00:30:00', // Adjust time slot duration as needed
            slotLabelInterval: { hours: 1 }, // Show time labels for every hour
            slotMinTime: '08:30:00', // Set the start time for the schedule
            slotMaxTime: '18:30:00', // Set the end time for the schedule
            slotEventOverlap: false, // Prevent events from overlapping in the time slots
            firstDay: 1,
            views: {
                timeGridWeek: {
                    titleFormat: { weekday: 'long' } // Display only the weekday name in the title
                }
            },
            slotLabelFormat: {
                hour: 'numeric',
                minute: '2-digit',
                hour12: false,
            },
            // Customize the day headers to start with Monday
            columnHeaderFormat: { weekday: 'long' },
            eventSources: [
                {
                    events: eventData
                }
            ],
            eventContent: function(arg) {
                // Create a wrapper element
                let customContent = document.createElement('div');

                // Create title element
                let titleElement = document.createElement('div');
                titleElement.innerHTML = arg.event.title;

                // Create description element
                let descriptionElement = document.createElement('div');
                descriptionElement.innerHTML = arg.event.extendedProps.description;

                // Append title and description to the wrapper
                customContent.appendChild(titleElement);
                customContent.appendChild(descriptionElement);

                return { domNodes: [customContent] };
            },
        });
        calendar.render();
    })
</script>


