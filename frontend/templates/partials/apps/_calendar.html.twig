<div class="col-xl-12">
    <div class="card card-h-100">
        <div class="card-body">
            <div id="calendar"></div>
        </div>
    </div>
</div><!-- end col -->
<div style='clear:both'></div>

<!-- calendar min js -->
<script src="{{ absolute_url(asset("assets/libs/fullcalendar/index.global.min.js")) }}"></script>

<!-- Calendar init -->
<script src="{{ absolute_url(asset("assets/js/pages/calendar.init.js")) }}"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const calendarEl = document.getElementById('calendar')
        const calendar = new FullCalendar.Calendar(calendarEl, {
            headerToolbar: {
                start: '', // Remove the left part (previous button)
                center: 'title', // Display the title (e.g., current date)
                end: '' // Remove the right part (next button)
            },
            initialView: 'timeGridWeek',
            slotDuration: '00:30:00', // Duration of each time slot (30 minutes)
            slotLabelInterval: '01:00', // Show time labels every 1 hour
            slotMinTime: '08:00:00', // Earliest time (e.g., 8:00 AM)
            slotMaxTime: '18:30:00', // Latest time (e.g., 6:30 PM)
            businessHours: {
                // Define business hours (the time slots when courses are scheduled)
                daysOfWeek: [1, 2, 3, 4, 5], // Monday to Friday
                startTime: '08:00', // Start of business hours (e.g., 8:00 AM)
                endTime: '18:30' // End of business hours (e.g., 6:30 PM)
            },
            nowIndicator: true, // Display a line indicating the current time
            events: generateRandomEvents() // Load events generated by the function
        });
        calendar.render();
        function generateRandomEvents() {
            const events = [];
            const daysOfWeek = [1, 2, 3, 4, 5]; // Monday to Friday
            const courseTimes = [
                { startTime: '08:00', endTime: '10:00' },
                { startTime: '10:30', endTime: '12:00' },
                { startTime: '14:00', endTime: '16:00' },
                { startTime: '16:30', endTime: '18:30' }
            ];

            // Generate random events for each day of the week
            daysOfWeek.forEach(day => {
                courseTimes.forEach(time => {
                    const startDate = getRandomDate(day, time.startTime);
                    const endDate = getRandomDate(day, time.endTime);
                    events.push({
                        title: 'Course', // Event title
                        start: startDate,
                        end: endDate,
                        allDay: false // Set to false to display as time-specific event
                    });
                });
            });

            return events;
        }

        function getRandomDate(dayOfWeek, timeString) {
            const today = new Date();
            const currentDayOfWeek = today.getDay(); // Get today's day of the week (0 for Sunday, 1 for Monday, etc.)
            let daysToAdd = dayOfWeek - currentDayOfWeek;
            if (daysToAdd <= 0) {
                daysToAdd += 7; // If the specified day of the week has already passed this week, add 7 days to get next week
            }
            const targetDate = new Date(today.getTime() + daysToAdd * 24 * 60 * 60 * 1000); // Calculate target date

            // Parse time string and set the target time
            const [hours, minutes] = timeString.split(':');
            targetDate.setHours(hours);
            targetDate.setMinutes(minutes);
            targetDate.setSeconds(0);

            return targetDate;
        }
    })
</script>


